<?xml version="1.0" encoding="UTF-8"?>
<project name="Jenkins Magento 1.9" default="full-build">
	<property name="phploc"  value="phploc"/>
	<property name="pdepend" value="pdepend"/>
	<property name="phpmd"   value="phpmd"/>
	<property name="phpunit" value="phpunit"/>
	<property name="phpcpd"   value="phpcpd"/>
	<property name="phpcs"   value="phpcs"/>
	<property name="phpdox"  value="phpdox"/>

	<property name="mysql.host" value="127.0.0.1"/>
	<property name="mysql.username" value="root"/>
	<property name="mysql.password" value="Welcome!"/>
	<property name="mysql.dbname" value="pensida_jenkins"/>
	<property name="mysql.phpunit.dbname" value="pensida_jenkins_phpunit"/>
	<property name="path.code.src" value="${basedir}/app/code/local"/>

	<target name="full-build"
			depends="prepare,static-analysis,phpunit,phpdox,-check-failure"
			description="Performs static analysis, runs the tests, and generates project documentation"/>

	<target name="full-build-parallel"
			depends="prepare,static-analysis-parallel,phpunit,phpdox,-check-failure"
			description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>

	<target name="quick-build"
			depends="prepare,lint,phpunit,-check-failure"
			description="Performs a lint check and runs the tests (without generating code coverage reports)"/>

	<target name="prepare-env"
	unless="prepare-env.done">

		<copy file="app/etc/local.xml.phpunit.template" tofile="app/etc/local.xml.phpunit"/>
		<replace file="app/etc/local.xml.phpunit">
			<replacefilter token="{{secure_url}}" value="${url_dev_env}"/>
			<replacefilter token="{{unsecure_url}}" value="${url_dev_env}"/>
			<replacefilter token="{{db_name_test}}" value="${mysql.phpunit.dbname}"/>
		</replace>

		<copy file="ci/templates/local.xml.base" tofile="app/etc/local.xml"/>
		<replace file="app/etc/local.xml">
			<replacefilter token="%MYSQL_HOST%" value="${mysql.host}"/>
			<replacefilter token="%MYSQL_USER%" value="${mysql.username}"/>
			<replacefilter token="%MYSQL_PASSWORD%" value="${mysql.password}"/>
			<replacefilter token="%MYSQL_DATABASE_NAME%" value="${mysql.dbname}"/>
		</replace>

		<sql
				driver="com.mysql.jdbc.Driver"
				url="jdbc:mysql://${mysql.host}:3306/mysql"
				userid="${mysql.username}"
				password="${mysql.password}"
				onerror="continue"
				autocommit="true">
			DROP DATABASE ${mysql.dbname};
			DROP DATABASE ${mysql.phpunit.dbname};
		</sql>
		<sql
				driver="com.mysql.jdbc.Driver"
				url="jdbc:mysql://${mysql.host}:3306/mysql"
				userid="${mysql.username}"
				password="${mysql.password}"
				autocommit="true">
			CREATE DATABASE ${mysql.dbname};
			CREATE DATABASE ${mysql.phpunit.dbname};
		</sql>

		<exec executable="php">
			<arg value="index.php"/>
		</exec>
		<property name="prepare-env.done" value="true"/>
	</target>

	<target name="prepare"
		unless="prepare.done"
		depends="clean,prepare-env"
		description="Prepare for build">
		<mkdir dir="${basedir}/build/api"/>
		<mkdir dir="${basedir}/build/coverage"/>
		<mkdir dir="${basedir}/build/logs"/>
		<mkdir dir="${basedir}/build/pdepend"/>
		<mkdir dir="${basedir}/build/phpdox"/>
		<property name="prepare.done" value="true"/>
	</target>

	<target name="clean"
		unless="clean.done"
		description="Cleanup build artifacts">
		<delete dir="${basedir}/build/api"/>
		<delete dir="${basedir}/build/coverage"/>
		<delete dir="${basedir}/build/logs"/>
		<delete dir="${basedir}/build/pdepend"/>
		<delete dir="${basedir}/build/phpdox"/>
		<property name="clean.done" value="true"/>
	</target>

	<target name="static-analysis"
		depends="lint,phploc-ci,pdepend,phpmd-ci"
		description="Performs static analysis" />

	<!-- Adjust the threadCount attribute's value to the number of CPUs -->
	<target name="static-analysis-parallel"
			depends="prepare"
			description="Performs static analysis (executing the tools in parallel)">
		<parallel threadCount="2">
			<sequential>
				<antcall target="pdepend"/>
				<antcall target="phpmd-ci"/>
			</sequential>
			<antcall target="lint"/>
			<antcall target="phpcpd-ci"/>
			<antcall target="phpcs-ci"/>
			<antcall target="phploc-ci"/>
		</parallel>
	</target>

	<target name="lint"
		unless="lint.done"
		description="Perform syntax check of sourcecode files">
		<apply executable="php" taskname="lint">
			<arg value="-l" />

			<fileset dir="${path.code.src}">
				<include name="**/*.php" />
				<modified />
			</fileset>
		</apply>

		<property name="lint.done" value="true"/>
	</target>


	<target name="phploc"
		unless="phploc.done"
		description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
		<exec executable="${phploc}" taskname="phploc">
			<arg value="--count-tests" />
			<arg path="${path.code.src}" />
		</exec>

		<property name="phploc.done" value="true"/>
	</target>

	<target name="phploc-ci"
		unless="phploc.done"
		depends="prepare"
		description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${phploc}" taskname="phploc">
			<arg value="--count-tests" />
			<arg value="--log-csv" />
			<arg path="${basedir}/build/logs/phploc.csv" />
			<arg value="--log-xml" />
			<arg path="${basedir}/build/logs/phploc.xml" />
			<arg path="${path.code.src}" />
		</exec>

		<property name="phploc.done" value="true"/>
	</target>

	<target name="pdepend"
		unless="pdepend.done"
		depends="prepare"
		description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${pdepend}" taskname="pdepend">
			<arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
			<arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
			<arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
			<arg path="${path.code.src}" />
		</exec>

		<property name="pdepend.done" value="true"/>
	</target>

	<target name="phpmd"
		unless="phpmd.done"
		description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${phpmd}" taskname="phpmd">
			<arg path="${basedir}/app/code/local" />
			<arg value="text" />
			<arg path="${basedir}/build/phpmd.xml" />
		</exec>

		<property name="phpmd.done" value="true"/>
	</target>

	<target name="phpmd-ci"
		unless="phpmd.done"
		depends="prepare"
		description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${phpmd}" taskname="phpmd">
			<arg path="${basedir}/app/code/local" />
			<arg value="xml" />
			<arg path="${basedir}/build/phpmd.xml" />
			<arg value="--reportfile" />
			<arg path="${basedir}/build/logs/pmd.xml" />
		</exec>

		<property name="phpmd.done" value="true"/>
	</target>

	<target name="phpcs"
			unless="phpcs.done"
			description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${phpcs}" taskname="phpcs">
			<arg value="--standard=PSR2" />
			<arg value="--extensions=php" />
			<arg value="--ignore=autoload.php" />
			<arg path="${path.code.src}" />
		</exec>

		<property name="phpcs.done" value="true"/>
	</target>

	<target name="phpcs-ci"
			unless="phpcs.done"
			depends="prepare"
			description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
			<arg value="--report=checkstyle" />
			<arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
			<arg value="--standard=PSR2" />
			<arg value="--extensions=php" />
			<arg value="--ignore=autoload.php" />
			<arg path="${path.code.src}" />
		</exec>

		<property name="phpcs.done" value="true"/>
	</target>

	<target name="phpcpd-ci"
			unless="phpcpd.done"
			depends="prepare"
			description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${phpcpd}" taskname="phpcpd">
			<arg value="--log-pmd" />
			<arg path="${basedir}/build/logs/pmd-cpd.xml" />
			<arg path="${basedir}/src" />
		</exec>

		<property name="phpcpd.done" value="true"/>
	</target>

	<target name="phpunit"
		unless="phpunit.done"
		depends="prepare"
		description="Run unit tests with PHPUnit">
		<exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
			<arg value="--stderr"/>
			<arg value="--configuration"/>
			<arg path="${basedir}/phpunit.xml"/>
		</exec>

		<property name="phpunit.done" value="true"/>
	</target>

	<target name="phpdox"
			unless="phpdox.done"
			depends="phploc-ci,phpcs-ci,phpmd-ci"
			description="Generate project documentation using phpDox">
		<exec executable="${phpdox}" taskname="phpdox">
			<arg value="-f" />
			<arg value="${basedir}/build/phpdox.xml" />
		</exec>

		<property name="phpdox.done" value="true"/>
	</target>

	<target name="-check-failure">
		<fail message="PHPUnit did not finish successfully">
			<condition>
				<not>
					<equals arg1="${result.phpunit}" arg2="0"/>
				</not>
			</condition>
		</fail>
	</target>
</project>
